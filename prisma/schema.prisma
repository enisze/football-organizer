generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tokens {
  id            String   @id @default(cuid())
  access_token  String   @db.Text
  refresh_token String   @unique
  expiry_date   DateTime
  ownerId       String
  user          User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

enum EventEnvironemnt {
  INDOOR
  OUTDOOR
}

model Event {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  address         String
  date            DateTime
  endTime         String
  startTime       String
  bookingDate     DateTime?
  cost            Float
  environment     EventEnvironemnt       @default(OUTDOOR)
  status          EventStatus            @default(CREATED)
  maxParticipants Int                    @default(10)
  participants    ParticipantsOnEvents[]
  Group           Group?                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String?

  @@index([groupId])
}

model ParticipantsOnEvents {
  eventId   String
  date      DateTime @default(now())
  id        String
  comment   String?
  paymentId String?

  payment         Payment?        @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  userEventStatus UserEventStatus @default(AVAILABLE)
  user            User            @relation(fields: [id], references: [id], onDelete: Cascade)
  event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([id, eventId])
  @@index([id])
  @@index([eventId])
  @@index([paymentId])
}

model Payment {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  eventId              String
  userId               String
  amount               Float
  paymentDate          DateTime
  gmailMailId          String
  ParticipantsOnEvents ParticipantsOnEvents[]

  @@index([eventId])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Group {
  id           String         @id @default(cuid())
  ownerId      String
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  events       Event[]
  users        UserOnGroups[]
  pricingModel PricingModel   @default(FREE)
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  emailVerified        DateTime?
  image                String?
  role                 String                 @default("user")
  createdAt            DateTime               @default(now())
  password             String?
  notificationsEnabled Boolean                @default(true)
  paypalName           String?
  accounts             Account[]
  sessions             Session[]
  events               ParticipantsOnEvents[]
  groups               UserOnGroups[]
  ownedGroups          Group[]
  Tokens               Tokens[]
}

model UserOnGroups {
  id      String
  groupId String
  role    GroupRole @default(USER)
  user    User      @relation(fields: [id], references: [id], onDelete: Cascade)
  group   Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([id, groupId])
  @@index([id])
  @@index([groupId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GroupRole {
  OWNER
  ADMIN
  USER
}

enum EventStatus {
  CANCELED
  CREATED
  BOOKED
}

enum UserEventStatus {
  MAYBE
  AVAILABLE
  JOINED
  CANCELED
}

enum PricingModel {
  FREE
  SUPPORTER
  PREMIUM
}
