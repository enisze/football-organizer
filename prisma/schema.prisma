generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TokenType {
  calendar
  email
}

enum ProviderType {
  google
  microsoft
  facebook
}

model Tokens {
  id            String       @id @default(cuid())
  access_token  String       @db.Text
  refresh_token String
  expiry_date   DateTime
  ownerId       String
  type          TokenType
  provider      ProviderType
  user          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

enum EventEnvironemnt {
  INDOOR
  OUTDOOR
}

model Event {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  address         String
  date            DateTime
  endTime         String
  startTime       String
  bookingDate     DateTime?
  cost            Float
  environment     EventEnvironemnt       @default(OUTDOOR)
  status          EventStatus            @default(CREATED)
  maxParticipants Int                    @default(10)
  isTemplate      Boolean                @default(false)
  participants    ParticipantsOnEvents[]
  Group           Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String

  @@index([groupId])
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  MAYBE
}

enum TimeSlotType {
  DAY_SPECIFIC
  DATE_SPECIFIC
}

model TimeSlot {
  id                String       @id @default(cuid())
  startTime         String
  endTime           String
  userId            String
  type              TimeSlotType
  day               Int?
  date              DateTime?
  weekNumber        Int?         @default(1)
  biWeeklyStartWeek Int? // Pattern: 0 for even weeks = week 1, 1 for odd weeks = week 1
  isException       Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  groups            Group[]

  @@index([userId])
  @@index([type])
  @@index([date])
  @@index([weekNumber])
}

model ParticipantsOnEvents {
  eventId   String
  date      DateTime @default(now())
  id        String
  comment   String?
  paymentId String?

  payment         Payment?        @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  userEventStatus UserEventStatus @default(AVAILABLE)
  user            User            @relation(fields: [id], references: [id], onDelete: Cascade)
  event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([id, eventId])
  @@index([id])
  @@index([eventId])
  @@index([paymentId])
}

model Payment {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  eventId              String
  userId               String
  amount               Float
  paymentDate          DateTime
  gmailMailId          String
  ParticipantsOnEvents ParticipantsOnEvents[]

  @@index([eventId])
  @@index([userId])
}

model Account {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?   @db.Text
  refreshToken String?   @db.Text
  idToken      String?   @db.Text
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  scope        String?

  accountId             String
  providerId            String
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?

  @@index([userId])
  @@map("account")
}

model Session {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Group {
  id           String         @id @default(cuid())
  ownerId      String
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  events       Event[]
  code         String?        @unique
  users        UserOnGroups[]
  pricingModel PricingModel   @default(FREE)
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  timeSlots    TimeSlot[]

  @@index([ownerId])
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  emailVerified        Boolean?
  image                String?
  role                 String                 @default("user")
  createdAt            DateTime               @default(now())
  password             String?
  notificationsEnabled Boolean                @default(true)
  paypalName           String?
  accounts             Account[]
  sessions             Session[]
  events               ParticipantsOnEvents[]
  groups               UserOnGroups[]
  ownedGroups          Group[]
  Tokens               Tokens[]
  timeSlots            TimeSlot[]
  updatedAt            DateTime

  @@map("user")
}

model UserOnGroups {
  id      String
  groupId String
  role    GroupRole @default(USER)
  user    User      @relation(fields: [id], references: [id], onDelete: Cascade)
  group   Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([id, groupId])
  @@index([id])
  @@index([groupId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GroupRole {
  OWNER
  ADMIN
  USER
}

enum EventStatus {
  CANCELED
  CREATED
  BOOKED
}

enum UserEventStatus {
  MAYBE
  AVAILABLE
  JOINED
  CANCELED
}

enum PricingModel {
  FREE
  SUPPORTER
  PREMIUM
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
